"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

import time


def get_time(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        res = func(*args, **kwargs)
        end = time.time()
        print(func.__name__, end - start)
        return res

    return wrapper


@get_time
def init_list():
    lst = []
    for i in range(1000000):
        lst.append(i)
    return lst


@get_time
def init_dict():
    dict = {}
    for i in range(1000000):
        dict[i] = i
    return dict


@get_time
def add_to_list(lst):
    for i in range(len(lst), len(lst) + 1000000):
        lst.append(i)


@get_time
def add_to_dict(dict):
    for i in range(1000000, 2000000):
        dict[i] = i



@get_time
def dell_list(lst):
    for i in range(1000):
        lst.pop(i)



@get_time
def dell_dict(dict):
    for i in range(1000000, 2000000):
        dict.pop(i)
        dict[i] = i


list = init_list()
dict = init_dict()
add_to_list(list)
add_to_dict(dict)
dell_list(list)
dell_dict(dict)


"""
init_list 0.1550142765045166
init_dict 0.15746331214904785
add_to_list 0.14701080322265625
add_to_dict 0.16301274299621582
dell_list 4.101390600204468
dell_dict 0.4830508232116699


Выводы:
1. инициализация быстрее у списка, медленнее у словаря - для словаря требуются расчеты хешей для ключей
2. добавление элементов в список быстрее, медленнее у словаря - для словаря требуются расчеты хешей для ключей
3. удаление элементов у словаря быстрее, медленнее у списка - для списка требуются расчеты хешей для ключей
"""